{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"padding",
				"padding-top"
			],
			[
				"form",
				"forms"
			],
			[
				"djan",
				"django_comments"
			],
			[
				"Co",
				"Comment"
			],
			[
				"f",
				"font-size"
			],
			[
				"h",
				"h2	Tag"
			],
			[
				"que",
				"queryd"
			],
			[
				"quer",
				"query_update"
			],
			[
				"get",
				"get_object_or_404"
			],
			[
				"query",
				"queryd"
			],
			[
				"ho",
				"home"
			],
			[
				"q",
				"queryd"
			],
			[
				"Quer",
				"QueryS"
			],
			[
				"re",
				"request"
			],
			[
				"padd",
				"padding-left"
			],
			[
				"back",
				"background-color"
			],
			[
				"di",
				"display"
			],
			[
				"mod",
				"model_attr"
			],
			[
				"de",
				"delete"
			],
			[
				"s",
				"slug"
			],
			[
				"p",
				"p	Tag"
			],
			[
				"all",
				"allquery"
			],
			[
				"time",
				"timedelta"
			],
			[
				"t",
				"title	Attr"
			],
			[
				"color",
				"color"
			],
			[
				"ma",
				"margin-top"
			],
			[
				"in",
				"inline-block"
			],
			[
				"fon",
				"font-weight"
			],
			[
				"pa",
				"padding-left"
			],
			[
				"U",
				"UserProfileF"
			],
			[
				"user",
				"UserProfileF"
			],
			[
				"Q",
				"QueryS"
			],
			[
				"Mar",
				"MarkdownWidget"
			],
			[
				"ba",
				"background-color"
			],
			[
				"T",
				"TextInput"
			],
			[
				"ch",
				"CharField"
			],
			[
				"he",
				"max-height"
			],
			[
				"backg",
				"background-image"
			],
			[
				"wi",
				"width"
			],
			[
				"col",
				"border-collapse"
			],
			[
				"b",
				"border-image"
			],
			[
				"po",
				"position"
			],
			[
				"te",
				"text-align"
			],
			[
				"cont",
				"context_dict"
			],
			[
				"lo",
				"login_required"
			],
			[
				"comm",
				"CommentForm"
			],
			[
				"w",
				"width"
			],
			[
				"pop",
				"popular_query"
			],
			[
				"branch",
				"branch_query"
			],
			[
				"bra",
				"branch_query"
			],
			[
				"def",
				"default"
			],
			[
				"text",
				"text-align"
			],
			[
				"wid",
				"width"
			],
			[
				"con",
				"context_dict"
			],
			[
				"CE",
				"CE"
			],
			[
				"C",
				"CSE"
			],
			[
				"l",
				"loader"
			],
			[
				"User",
				"UserProfile"
			],
			[
				"bo",
				"border-radius"
			],
			[
				"i",
				"id	Attr"
			],
			[
				"a",
				"align	Attr"
			],
			[
				"d",
				"default"
			],
			[
				"M",
				"models"
			],
			[
				"model",
				"models"
			],
			[
				"pro",
				"profile_form"
			],
			[
				"Cho",
				"CHOICES"
			],
			[
				"Re",
				"required"
			],
			[
				"cle",
				"cleaned_data"
			],
			[
				"for",
				"forms"
			],
			[
				"colo",
				"background-color"
			],
			[
				"STA",
				"STATIC_PATH"
			],
			[
				"TEM",
				"TEMPLATE_PATH"
			],
			[
				"Post",
				"PostForm"
			],
			[
				"url",
				"url"
			],
			[
				"li",
				"li	Tag"
			],
			[
				"st",
				"style	Tag"
			],
			[
				"PRO",
				"PROJECT_ROOT"
			],
			[
				"O",
				"os"
			],
			[
				"m",
				"max_length"
			],
			[
				"post",
				"post_url"
			],
			[
				"pr",
				"PROJECT_ROOT"
			],
			[
				"H",
				"HttpResponse"
			],
			[
				"P",
				"PROJECT_PATH"
			],
			[
				"Pr",
				"PROJECT_ROOT"
			],
			[
				"S",
				"SETTINGS_DIR"
			],
			[
				"__",
				"__file__"
			],
			[
				"htt",
				"HttpResponse"
			],
			[
				"al",
				"text-align"
			],
			[
				"background",
				"background-color"
			],
			[
				"res",
				"response"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"I",
				"IntegrityError"
			],
			[
				"o",
				"open_tasks"
			],
			[
				"no",
				"None"
			],
			[
				"font",
				"font-size"
			],
			[
				"max",
				"max-width"
			],
			[
				"old",
				"old_tasks"
			],
			[
				"poste",
				"posted_date"
			],
			[
				"pos",
				"posted_date"
			],
			[
				"reu",
				"return"
			],
			[
				"ne",
				"new_user"
			],
			[
				"register",
				"register"
			],
			[
				"Pass",
				"PasswordField"
			],
			[
				"da",
				"DataRequired"
			],
			[
				"tr",
				"True"
			],
			[
				"co",
				"Column"
			],
			[
				"DA",
				"DATABASE_PATH"
			],
			[
				"fi",
				"filter_by"
			],
			[
				"new",
				"new_task"
			],
			[
				"nw",
				"new_task"
			],
			[
				"add",
				"AddTaskForm"
			],
			[
				"c",
				"Column"
			],
			[
				"du",
				"DataRequired"
			],
			[
				"D",
				"DataRequired"
			],
			[
				"Dat",
				"DataField"
			],
			[
				"th",
				"th	Tag"
			],
			[
				"op",
				"option	Tag"
			],
			[
				"wh",
				"where"
			],
			[
				"tas",
				"task_id"
			],
			[
				"task",
				"task_id"
			],
			[
				"u",
				"url_for"
			],
			[
				"conn",
				"connect_db"
			],
			[
				"ac",
				"action	Attr"
			],
			[
				"r",
				"return"
			],
			[
				"red",
				"redirect"
			],
			[
				"login",
				"login_required"
			],
			[
				"meth",
				"methods"
			],
			[
				"Pa",
				"PASSWORD"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "from django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.shortcuts import get_object_or_404, redirect, render_to_response\nfrom django.core.context_processors import csrf\nfrom django.core.urlresolvers import reverse, reverse_lazy, resolve\nfrom vtr.forms import UserForm, UserProfileFormS, QueryFormS, SearchForm\nfrom django.core.paginator import Paginator, EmptyPage, PageNotAnInteger\nfrom django.core.exceptions import PermissionDenied\nfrom django.core.urlresolvers import reverse\nfrom vtr.models import UserProfileS, QueryS\nfrom faculty.models import UserProfileF\nfrom django.db.models import Q\nfrom faculty.views import index as indexf\nfrom django.core.mail import send_mail\nimport hashlib, datetime, random\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom django.db.models import Count\nfrom django_comments.models import Comment\nfrom django_comments.forms import CommentDetailsForm\nfrom datetime import *\n\n\n# Create your views here.\n\ndef home(request):\n    if UserProfileS.objects.filter(user=request.user.id):\n        return index(request)\n    elif UserProfileF.objects.filter(user=request.user.id):\n        userprofile = UserProfileF.objects.filter(user=request.user.id)\n\n#       if userprofile[0].department == 'ADMINISTRATION':\n#           return administration.views.index(request)\n#       else:\n        return indexf(request)\n    else:\n        return render(request, 'vtr/home.html')\n\n\n\n\n@login_required\ndef index(request):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    allquery = QueryS.objects.all().order_by('-created_at')\n    paginator = Paginator(allquery, 10)# Show 25 contacts per page\n    page = request.GET.get('page')\n    try:\n        querys = paginator.page(page)\n    except PageNotAnInteger:\n        # If page is not an integer, deliver first page.\n        querys = paginator.page(1)\n    except EmptyPage:\n        # If page is out of range (e.g. 9999), deliver last page of results.\n        querys = paginator.page(paginator.num_pages)\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    title='All QUERIES'\n    context_dict = {\n    'userprofile': userprofile,\n    'allquery': allquery,\n    'popular_query': popular_query,\n    'branch': branch,\n    'title': title,\n    'querys': querys\n    }\n    return render(request, 'vtr/index.html', context_dict)\n\n\ndef registerS(request):\n    args = {}\n    args.update(csrf(request))\n    if request.method == 'POST':\n        # Attempt to grab information from the raw form information.\n        # Note that we make use of both UserForm and UserProfileForm.\n        user_form = UserForm(data=request.POST)\n        profile_form = UserProfileFormS(data=request.POST)\n        # If the two forms are valid...\n        args['form'] = user_form\n        if user_form.is_valid() and profile_form.is_valid():\n            # Save the user's form data to the database.\n            user = user_form.save()\n            # Now we hash the password with the set_password method.\n            # Once hashed, we can update the user object.\n            username = user_form.cleaned_data['username']\n            email = user_form.cleaned_data['email']\n            rollnumber = profile_form.data['rollnumber']\n            year = profile_form.data['year']\n            branch = profile_form.data['branch']\n            hostler = profile_form.data['hostler']\n            salt = hashlib.sha1(str(random.random())).hexdigest()[:5]\n            activation_key = hashlib.sha1(salt+email).hexdigest()\n            key_expires = datetime.datetime.today() + datetime.timedelta(2)\n            user.set_password(user.password)\n            user.save()\n            # Now sort out the UserProfile instance.\n            # Since we need to set the user attribute ourselves, we set commit=False.\n            # This delays saving the model until we're ready to avoid integrity problems.\n            profile = profile_form.save(commit=False)\n            profile.user = user\n            # Did the user provide a profile picture?\n            # If so, we need to get it from the input form and put it in the UserProfile model.\n            # Now we save the UserProfile model instance.\n            profile = UserProfileS(user=user, rollnumber=rollnumber, year=year, branch=branch, hostler=hostler, activation_key=activation_key, key_expires=key_expires,)\n            profile.save()\n\n             # Send email with activation key\n            email_subject = 'Account confirmation'\n            email_body = \"Hey %s, thanks for signing up. To activate your account, click this link within 48hours http://127.0.0.1:8000/confirm/%s\" % (username, activation_key)\n\n            send_mail(email_subject, email_body, 'balyan05.manish@gmail.com', [email], fail_silently=False)\n            return render(request, 'vtr/home.html')\n            \n        # Invalid form or forms - mistakes or something else?\n        # Print problems to the terminal.\n        # They'll also be shown to the user.\n        else:\n            print user_form.errors, profile_form.errors\n    # Not a HTTP POST, so we render our form using two ModelForm instances.\n    # These forms will be blank, ready for user input.\n    else:\n        user_form = UserForm()\n        profile_form = UserProfileFormS()\n\n    # Render the template depending on the context.\n    return render(request, 'vtr/register.html', {'user_form': user_form, 'profile_form': profile_form})\n\n\ndef register_confirm(request, activation_key):\n    # check if user is already logged in and if he is redirect him to some other url, e.g. home\n    if request.user.is_authenticated():\n        HttpResponseRedirect('/home')\n\n    # check if there is UserProfile which matches the activation key (if not then display 404)\n    user_profile = get_object_or_404(UserProfileS, activation_key=activation_key)\n\n    #check if the activation key has expired, if it hase then render confirm_expired.html\n    if user_profile.key_expires < timezone.now():\n        return render_to_response('vtr/confirm_expired.html')\n    #if the key hasn't expired save user and set him as active and render some template to confirm activation\n    user = user_profile.user\n    user.is_active = True\n    user.save()\n    return render_to_response('vtr/confirm.html')\n\n@login_required\ndef query(request, slug):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    single_query = get_object_or_404(QueryS, slug=slug)\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    single_query.views += 1  # increment the no of views\n    single_query.save()\n    context_dict = {\n        'userprofile': userprofile,\n        'single_query': single_query,\n        'popular_query': popular_query,\n        'branch': branch\n        }\n\n    return render(request, 'vtr/query.html', context_dict)\n\n\n\n@login_required\ndef add_queryS(request):\n    if request.method == 'POST':\n        query_form = QueryFormS(request.POST, request.FILES)\n\n        if query_form.is_valid():# is the form valid\n            query= query_form.save(commit=False)\n            if UserProfileF.objects.filter(user=request.user.id):\n                query.branch=UserProfileF.objects.only('department').get(user=request.user).department\n            else:\n                query.branch=UserProfileS.objects.only('branch').get(user=request.user).branch\n            query.user=request.user\n            query.save()\n            query_form.save_m2m()\n\n            return redirect(home)\n        else:\n            print query_form.errors  # no, display error to end user\n    else:\n        query_form = QueryFormS()\n    return render(request, 'vtr/add_query.html', {'query_form': query_form},)\n\n\n@login_required\ndef branch(request, branch_name):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    allquery = QueryS.objects.filter(branch= branch_name).order_by('-created_at')\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    title= branch_name + ' Queries'\n    context_dict = {\n        'userprofile': userprofile,\n        'allquery': allquery,\n        'popular_query': popular_query,\n        'branch': branch,\n        'title': title\n        }\n\n    return render(request, 'vtr/index.html', context_dict)\n\n\n@login_required\ndef my_query(request):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    allquery = QueryS.objects.filter(user=request.user.id).order_by('-created_at')\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    title= request.user.username + ' Queries'\n    context_dict = {\n        'userprofile': userprofile,\n        'allquery': allquery,\n        'popular_query': popular_query,\n        'branch': branch,\n        'title':title\n        }\n\n    return render(request, 'vtr/index.html', context_dict)\n\n\n\n@login_required\ndef week(request):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    one_week_ago = datetime.today() - timedelta(days=7)\n    allquery = QueryS.objects.filter(created_at__gte=one_week_ago).order_by('-created_at')\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    title= request.user.username + ' Queries'\n    context_dict = {\n        'userprofile': userprofile,\n        'allquery': allquery,\n        'popular_query': popular_query,\n        'branch': branch,\n        'title':title\n        }\n    return render(request, 'vtr/index.html', context_dict)\n\n\n@login_required\ndef month(request):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    one_month_ago = datetime.today() - timedelta(days=30)\n    allquery = QueryS.objects.filter(created_at__gte=one_month_ago).order_by('-created_at')\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    title= request.user.username + ' Queries'\n    context_dict = {\n        'userprofile': userprofile,\n        'allquery': allquery,\n        'popular_query': popular_query,\n        'branch': branch,\n        'title':title\n        }\n\n    return render(request, 'vtr/index.html', context_dict)\n\n\ndef views(request):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    allquery = QueryS.objects.order_by('-views')\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    title= request.user.username + ' Queries'\n    context_dict = {\n        'userprofile': userprofile,\n        'allquery': allquery,\n        'popular_query': popular_query,\n        'branch': branch,\n        'title':title\n        }\n\n    return render(request, 'vtr/index.html', context_dict)\n\n\ndef comment(request):\n    userprofile = UserProfileS.objects.filter(user=request.user.id)\n    allquery = QueryS.objects.annotate(comment_count=Count('comments')).filter(comment_count__gt=0).order_by('-comment_count')\n    popular_query = QueryS.objects.order_by('-views')[:5]\n    branch = ['CSE','IT','ECE','ME','CE','EN']\n    title= request.user.username + ' Queries'\n    context_dict = {\n        'userprofile': userprofile,\n        'allquery': allquery,\n        'popular_query': popular_query,\n        'branch': branch,\n        'title':title\n        }\n\n    return render(request, 'vtr/index.html', context_dict)\n\n\n\"\"\"\ndef vote(request):\n    thread_id = int(request.POST.get('id'))\n    vote_type = request.POST.get('type')\n    vote_action = request.POST.get('action')\n\n    thread = get_object_or_404(Thread, pk=thread_id)\n\n    thisUserUpVote = thread.userUpVotes.filter(id=request.user.id).count()\n    thisUserDownVote = thread.userDownVotes.filter(id=request.user.id).count()\n\n    if (vote_action == 'vote'):\n        if (thisUserUpVote == 0) and (thisUserDownVote == 0):\n            if (vote_type == 'up'):\n                thread.userUpVotes.add(request.user)\n            elif (vote_type == 'down'):\n                thread.userDownVotes.add(request.user)\n            else:\n                return HttpResponse('error-unknown vote type')\n        else:\n            return HttpResponse('error - already voted', thisUserUpVote, thisUserDownVote)\n    elif (vote_action == 'recall-vote'):\n        if (vote_type == 'up') and (thisUserUpVote == 1):\n            thread.userUpVotes.remove(request.user)\n        elif (vote_type == 'down') and (thisUserDownVote == 1):\n            thread.userDownVotes.remove(request.user)\n        else:\n            return HttpResponse('error - unknown vote type or no vote to recall')\n    else:\n        return HttpResponse('error - bad action')\n    num_votes = thread.userUpVotes.count() - thread.userDownVotes.count()\n\n    return HttpResponse(num_votes)\n\"\"\"\n\n\ndef query_delete(request, pk):\n    queryd = get_object_or_404(QueryS, pk=pk)\n    if request.method == 'POST':\n        queryd.delete()\n        return redirect('home')\n    return render(request, 'vtr/confirm_delete.html', {'object': queryd})\n\n\ndef query_update(request, pk):\n    queryu = get_object_or_404(QueryS, pk=pk)\n    form = QueryFormS(request.POST or None, instance=queryu)\n    if form.is_valid():\n        form.save()\n        return redirect('home')\n    return render(request, 'vtr/update_form.html', {'form': form})\n\ndef comment_delete(request, pk):\n    commentd = get_object_or_404(Comment, pk=pk)\n    if request.method == 'POST':\n        commentd.delete()\n        return redirect('home')\n    return render(request, 'vtr/confirm_delete.html', {'object': commentd})\n\n\ndef comment_update(request, pk):\n    commentu = get_object_or_404(Comment, pk=pk)\n    form = CommentDetailsForm(request.POST or None, instance=commentu)\n    if form.is_valid():\n        form.save()\n        return redirect('home')\n    return render(request, 'vtr/update_form.html', {'form': form})\n",
			"file": "view_the_review/vtr/views.py",
			"file_size": 14458,
			"file_write_time": 131058914996051705,
			"settings":
			{
				"buffer_size": 13883,
				"line_ending": "Unix"
			}
		},
		{
			"file": "view_the_review/vtr/urls.py",
			"settings":
			{
				"buffer_size": 1124,
				"line_ending": "Unix"
			}
		},
		{
			"file": "view_the_review/templates/vtr/index.html",
			"settings":
			{
				"buffer_size": 4877,
				"line_ending": "Unix"
			}
		},
		{
			"file": "view_the_review/templates/vtr/base.html",
			"settings":
			{
				"buffer_size": 4156,
				"line_ending": "Unix"
			}
		},
		{
			"file": "view_the_review/static/css/style.css",
			"settings":
			{
				"buffer_size": 4913,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 75.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			" import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/manish/Documents/view_the_review",
		"/home/manish/Documents/view_the_review/env/lib",
		"/home/manish/Documents/view_the_review/env/lib/python2.7",
		"/home/manish/Documents/view_the_review/env/lib/python2.7/site-packages",
		"/home/manish/Documents/view_the_review/env/lib/python2.7/site-packages/django_comments",
		"/home/manish/Documents/view_the_review/view_the_review",
		"/home/manish/Documents/view_the_review/view_the_review/static",
		"/home/manish/Documents/view_the_review/view_the_review/static/css",
		"/home/manish/Documents/view_the_review/view_the_review/templates",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr",
		"/home/manish/Documents/view_the_review/view_the_review/vtr"
	],
	"file_history":
	[
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/base.html",
		"/home/manish/Documents/vtr/view_the_review/templates/vtr/base.html",
		"/home/manish/Documents/view_the_review/view_the_review/static/css/style.css",
		"/home/manish/Documents/view_the_review/view_the_review/static/css/bootstrap.css",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/models.py",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/views.py",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/urls.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/query.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/comments/list.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/comments/form.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/index.html",
		"/home/manish/Documents/letsbegenuine/index.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/update_form.html",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/forms.py",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/confirm_delete.html",
		"/home/manish/Documents/view_the_review/view_the_review/view_the_review/urls.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/search/search.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/comments/posted.html",
		"/home/manish/Documents/view_the_review/view_the_review/view_the_review/settings.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/home.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/hostel/index.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/search/indexes/vtr/querys_text.txt",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/search_indexes.py",
		"/home/manish/Documents/view_the_review/env/lib/python2.7/site-packages/django_comments/views/comments.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/ query_confirm_delete.html",
		"/home/manish/Documents/view_the_review/view_the_review/static/js/myjquery.js",
		"/home/manish/Documents/view_the_review/view_the_review/static/js/bootstrap.min.js",
		"/home/manish/Documents/view_the_review/env/lib/python2.7/site-packages/django_comments/models.py",
		"/home/manish/view_the_review/view_the_review/urls.py",
		"/home/manish/view_the_review/view_the_review/settings.py",
		"/home/manish/Documents/vtr/view_the_review/vtr/views.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/faculty/base.html",
		"/home/manish/Documents/view_the_review/view_the_review/hostel/forms.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/hostel/query.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/hostel/base.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/add_query.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/hostel/add_query.html",
		"/home/manish/Documents/view_the_review/view_the_review/hostel/views.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/faculty/query.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/faculty/index.html",
		"/home/manish/Documents/view_the_review/view_the_review/faculty/search_indexes.py",
		"/home/manish/Documents/view_the_review/view_the_review/faculty/models.py",
		"/home/manish/Documents/view_the_review/view_the_review/faculty/urls.py",
		"/home/manish/Documents/view_the_review/view_the_review/faculty/forms.py",
		"/home/manish/Documents/view_the_review/view_the_review/faculty/views.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/faculty/confirm.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/login.html",
		"/home/manish/Documents/bootstrap-3.2.0-dist/css/styles.css",
		"/home/manish/Documents/view_the_review/view_the_review/templates/comments/comment_notification_email.txt",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/confirm.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/contact.html",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/admin.py",
		"/home/manish/Documents/django_ecommerce/view_the_review/view_the_review/urls.py",
		"/home/manish/Documents/django_ecommerce/view_the_review/templates/vtr/base.html",
		"/home/manish/Documents/view_the_review/env/lib/python2.7/site-packages/haystack/forms.py",
		"/home/manish/Documents/vtr/view_the_review/vtr/models.py",
		"/home/manish/Documents/view_the_review/env/lib/python2.7/site-packages/haystack/views.py",
		"/home/manish/Documents/view_the_review/view_the_review/view_the_review/search_sites.py",
		"/home/manish/Downloads/views_1460293901839.py",
		"/home/manish/Downloads/views_1460293901840.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/search/indexes/vtr/quesys_text.txt",
		"/home/manish/Documents/view_the_review/env/lib/python2.7/site-packages/django/template/loader.py",
		"/home/manish/Documents/view_the_review/view_the_review/hostel/models.py",
		"/home/manish/Documents/view_the_review/view_the_review/hostel/migrations/0001_initial.py",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/migrations/0001_initial.py",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/register.html",
		"/home/manish/Documents/django-quick-start/view_the_review/templates/vtr/index.html",
		"/home/manish/Documents/django-quick-start/view_the_review/static/css/style.css",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/branch.html",
		"/home/manish/Documents/django-bloggy/wayapp_project/templates/blog/post.html",
		"/home/manish/Documents/django-bloggy/wayapp_project/templates/base.html",
		"/home/manish/Documents/django-bloggy/wayapp_project/templates/blog/index.html",
		"/home/manish/Documents/django_ecommerce/django_ecommerce/templates/main/index.html",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/footer.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/django_comment_xtd/comment.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/comments/preview.html",
		"/home/manish/Documents/letsbegenuine/contact.html",
		"/home/manish/Documents/letsbegenuine/graphic-designing.html",
		"/home/manish/Downloads/django-threadedcomments-master/examples/core/templates/comments/core/form.html",
		"/home/manish/Downloads/django-threadedcomments-master/examples/example/urls.py",
		"/home/manish/Downloads/django-threadedcomments-master/examples/core/templates/comments/posted.html",
		"/home/manish/.local/share/Trash/files/threadedcomments/forms.py",
		"/home/manish/Downloads/django-threadedcomments-master/threadedcomments/models.py",
		"/home/manish/Downloads/django-threadedcomments-master/threadedcomments/forms.py",
		"/home/manish/Desktop/Wayapp-master/wayapp_project/templates/blog/post.html",
		"/home/manish/Documents/letsbegenuine/README.md",
		"/media/manish/EC584FAA584F727E/Users/Manish/Documents/letsbegenuine/index.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/forums/topic_detail.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/forums/topic_create.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/forums/post_create.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/forums/forum_detail.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/forums/category_list.html",
		"/home/manish/Documents/Activity/view_the_review/templates/vtr/login.html",
		"/home/manish/Documents/reg.html",
		"/home/manish/Documents/django_ecommerce/django_ecommerce/templates/payments/register.html",
		"/home/manish/.config/sublime-text-3/Packages/Python Flake8 Lint/Flake8Lint.sublime-settings",
		"/home/manish/.config/sublime-text-3/Packages/User/Flake8Lint.sublime-settings",
		"/home/manish/Documents/view_the_review/view_the_review/vtr/tests.py",
		"/home/manish/Documents/Activity/view_the_review/demo/models.py",
		"/home/manish/Documents/Activity/view_the_review/templates/vtr/register.html",
		"/home/manish/Documents/bootstrap-3.2.0-dist/index.html",
		"/home/manish/Documents/view_the_review/view_the_review/templates/vtr/add_post.html",
		"/home/manish/Documents/Activity/view_the_review/view_the_review/settings.py",
		"/home/manish/Documents/view_the_review/templates/demo/base.html",
		"/home/manish/Documents/view_the_review/templates/demo/index.html",
		"/home/manish/Documents/view_the_review/templates/demo/login.html",
		"/home/manish/Documents/view_the_review/demo/forms.py",
		"/home/manish/Documents/view_the_review/demo/models.py",
		"/home/manish/Documents/view_the_review/templates/demo/register.html",
		"/home/manish/Documents/view_the_review/demo/urls.py",
		"/home/manish/Documents/view_the_review/templates/demo/add_post.html",
		"/home/manish/Documents/view_the_review/demo/views.py",
		"/home/manish/Documents/view_the_review/static/img/vtr.png",
		"/home/manish/Documents/view_the_review/view_the_review/settings.py",
		"/home/manish/Documents/view_the_review/templates/demo/contact.html",
		"/home/manish/Documents/view_the_review/view_the_review/urls.py",
		"/home/manish/Documents/bootstrap-3.2.0-dist/contact.html",
		"/home/manish/Documents/books/django-bloggy/bloggy_project/blog/views.py",
		"/home/manish/Documents/books/django-bloggy/bloggy_project/templates/blog/index.html",
		"/home/manish/Documents/django-bloggy/wayapp_project/blog/urls.py",
		"/home/manish/Documents/django-bloggy/wayapp_project/templates/blog/login.html",
		"/home/manish/Documents/django-bloggy/wayapp_project/blog/views.py",
		"/home/manish/Documents/django-bloggy/wayapp_project/templates/blog/add_post.html",
		"/home/manish/Documents/django-bloggy/wayapp_project/templates/blog/register.html",
		"/home/manish/Documents/django-bloggy/wayapp_project/blog/forms.py",
		"/home/manish/Documents/django-bloggy/wayapp_project/blog/models.py",
		"/home/manish/Documents/django-bloggy/wayapp_project/static/style.css",
		"/home/manish/Documents/django-bloggy/wayapp_project/bloggy_project/urls.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"navbar-brand",
			"#cmt",
			">",
			"#right",
			"#left",
			"%}\"",
			"p",
			"lg"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "view_the_review/vtr/views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13883,
						"regions":
						{
						},
						"selection":
						[
							[
								8874,
								8874
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3689.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "view_the_review/vtr/urls.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1124,
						"regions":
						{
						},
						"selection":
						[
							[
								382,
								382
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "view_the_review/templates/vtr/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4877,
						"regions":
						{
						},
						"selection":
						[
							[
								2357,
								2357
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 705.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "view_the_review/templates/vtr/base.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4156,
						"regions":
						{
						},
						"selection":
						[
							[
								2202,
								2202
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 501.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "view_the_review/static/css/style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4913,
						"regions":
						{
						},
						"selection":
						[
							[
								4905,
								4905
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4671.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "view_the_review.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 332.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
